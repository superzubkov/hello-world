// Code generated by protoc-gen-go. DO NOT EDIT.
// source: robot.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AskRequest struct {
	Link                 string   `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AskRequest) Reset()         { *m = AskRequest{} }
func (m *AskRequest) String() string { return proto.CompactTextString(m) }
func (*AskRequest) ProtoMessage()    {}
func (*AskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a510a33b39d03304, []int{0}
}

func (m *AskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AskRequest.Unmarshal(m, b)
}
func (m *AskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AskRequest.Marshal(b, m, deterministic)
}
func (m *AskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskRequest.Merge(m, src)
}
func (m *AskRequest) XXX_Size() int {
	return xxx_messageInfo_AskRequest.Size(m)
}
func (m *AskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AskRequest proto.InternalMessageInfo

func (m *AskRequest) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type AskResponse struct {
	State                bool     `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AskResponse) Reset()         { *m = AskResponse{} }
func (m *AskResponse) String() string { return proto.CompactTextString(m) }
func (*AskResponse) ProtoMessage()    {}
func (*AskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a510a33b39d03304, []int{1}
}

func (m *AskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AskResponse.Unmarshal(m, b)
}
func (m *AskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AskResponse.Marshal(b, m, deterministic)
}
func (m *AskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AskResponse.Merge(m, src)
}
func (m *AskResponse) XXX_Size() int {
	return xxx_messageInfo_AskResponse.Size(m)
}
func (m *AskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AskResponse proto.InternalMessageInfo

func (m *AskResponse) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func init() {
	proto.RegisterType((*AskRequest)(nil), "api.AskRequest")
	proto.RegisterType((*AskResponse)(nil), "api.AskResponse")
}

func init() { proto.RegisterFile("robot.proto", fileDescriptor_a510a33b39d03304) }

var fileDescriptor_a510a33b39d03304 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xca, 0x4f, 0xca,
	0x2f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2c, 0xc8, 0x54, 0x52, 0xe0, 0xe2,
	0x72, 0x2c, 0xce, 0x0e, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0xc9,
	0xcc, 0xcb, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x94, 0xb9, 0xb8, 0xc1,
	0x2a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x44, 0xb8, 0x58, 0x8b, 0x4b, 0x12, 0x4b, 0x52,
	0xc1, 0x6a, 0x38, 0x82, 0x20, 0x1c, 0x23, 0x63, 0x2e, 0xd6, 0x20, 0x90, 0xd1, 0x42, 0x5a, 0x5c,
	0xcc, 0x8e, 0xc5, 0xd9, 0x42, 0xfc, 0x7a, 0x89, 0x05, 0x99, 0x7a, 0x08, 0x93, 0xa5, 0x04, 0x10,
	0x02, 0x10, 0x83, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0xee, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x50, 0x35, 0x60, 0xc0, 0x96, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RobotClient is the client API for Robot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RobotClient interface {
	Ask(ctx context.Context, in *AskRequest, opts ...grpc.CallOption) (*AskResponse, error)
}

type robotClient struct {
	cc *grpc.ClientConn
}

func NewRobotClient(cc *grpc.ClientConn) RobotClient {
	return &robotClient{cc}
}

func (c *robotClient) Ask(ctx context.Context, in *AskRequest, opts ...grpc.CallOption) (*AskResponse, error) {
	out := new(AskResponse)
	err := c.cc.Invoke(ctx, "/api.Robot/Ask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RobotServer is the server API for Robot service.
type RobotServer interface {
	Ask(context.Context, *AskRequest) (*AskResponse, error)
}

// UnimplementedRobotServer can be embedded to have forward compatible implementations.
type UnimplementedRobotServer struct {
}

func (*UnimplementedRobotServer) Ask(ctx context.Context, req *AskRequest) (*AskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ask not implemented")
}

func RegisterRobotServer(s *grpc.Server, srv RobotServer) {
	s.RegisterService(&_Robot_serviceDesc, srv)
}

func _Robot_Ask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).Ask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Robot/Ask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).Ask(ctx, req.(*AskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Robot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Robot",
	HandlerType: (*RobotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ask",
			Handler:    _Robot_Ask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "robot.proto",
}
